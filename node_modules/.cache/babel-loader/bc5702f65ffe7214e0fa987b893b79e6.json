{"ast":null,"code":"import _slicedToArray from\"D:/vscode/react_netease_music/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{useParams}from\"react-router-dom\";// import {search} from \"../utils/search\";\nimport{lyric}from\"../utils/lyric\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var counter=0;//第二版搜索结果\nexport default function Lyric(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),inputPageNum=_useState2[0],setInputPageNum=_useState2[1];var _useState3=useState({lyric:\"你好\",lyricList:[{time:\"\",lyc:\"\"}]}),_useState4=_slicedToArray(_useState3,2),result=_useState4[0],setResult=_useState4[1];var _useParams=useParams(),id=_useParams.id;var hasPrevious=function hasPrevious(){return counter===1;};var goPage=function goPage(pageNum){counter=pageNum;lyric({id:id}).then(function(response){var res=response.data;// console.log(res);\n// console.log(res.lrc);\nvar res1=res.lrc;var lyricList=result.lyricList;// console.log(res1);\nvar lyc1=res1.lyric;lyc1.split(/[\\n]/)// 截取中括号\n.forEach(function(item){var temp=item.split(/\\[(.+?)\\]/);lyricList.push({time:temp[1],// 时间\nlyc:temp[2]//歌词内容\n});});lyricList=lyricList.filter(function(v){return v['lyc'];});// 去除无歌词内容\nsetResult({lyric:res['lrc']['lyric'],lyricList:lyricList});// setResult({\n//     lyric:res.lrc.lyric,\n// })\n});};var nextPage=function nextPage(){console.log(counter);counter++;goPage(counter);};var previousPage=function previousPage(){console.log(counter);counter--;goPage(counter);};var handleInput=function handleInput(e){setInputPageNum(e.target.value);};var submitInputPage=function submitInputPage(){goPage(Number(inputPageNum));setInputPageNum('');};var goDetail=function goDetail(){window.open('#/detail','_self');};useEffect(function(){if(counter===0){goPage(1);}});return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"ul\",{style:{margin:\"2% 10% 0 10%\"},children:result.lyricList.map(function(value,index){return/*#__PURE__*/_jsxs(\"li\",{onClick:goDetail,children:[value.time,\"-----------\\u6B4C\\u8BCD:\",value.lyc]},index);})})})});}","map":{"version":3,"sources":["D:/vscode/react_netease_music/src/components/detail/Lyric.tsx"],"names":["React","useEffect","useState","useParams","lyric","counter","Lyric","inputPageNum","setInputPageNum","lyricList","time","lyc","result","setResult","id","hasPrevious","goPage","pageNum","then","response","res","data","res1","lrc","lyc1","split","forEach","item","temp","push","filter","v","nextPage","console","log","previousPage","handleInput","e","target","value","submitInputPage","Number","goDetail","window","open","margin","map","index"],"mappings":"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","sourcesContent":["\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\n// import {search} from \"../utils/search\";\r\nimport { lyric } from \"../utils/lyric\";\r\nimport {Button} from \"antd\";\r\nimport TopJumper from \"./TopJumper\";\r\n\r\n//封装歌曲结果对象\r\n/*\r\n* 不得不吐槽一下Typescript要求真多，这些参数是通过报错信息找到的，\r\n* 如果想看，可以在下面渲染的时候，在map中把value的类型去掉，并在li的渲染中直接渲染value，react会在报错信息中提示\r\n* 还不太清楚各个参数具体的类型，所以暂时都使用any\r\n* */\r\ninterface SongProps {\r\n    id: any,\r\n    name: any,\r\n    artists: any,\r\n    album: any,\r\n    duration: any,\r\n    copyrightId: any,\r\n    status: any,\r\n    alias: any,\r\n    rtype: any,\r\n    ftype: any,\r\n    mvid: any,\r\n    fee: any,\r\n    rUrl: any,\r\n    mark: any,\r\n}\r\nexport interface lyricmodel{\r\n    time:string,\r\n    lyc:string,\r\n}\r\nlet counter=0;\r\n//第二版搜索结果\r\nexport default function Lyric() {\r\n    const [inputPageNum,setInputPageNum]=useState('');\r\n    const [result, setResult] = useState({\r\n        lyric:\"你好\",\r\n        lyricList:[{time:\"\",lyc:\"\"}],\r\n        \r\n    });\r\n    let {id} = useParams() ;\r\n    const hasPrevious=()=>{\r\n        return counter===1;\r\n    }\r\n    const goPage = (pageNum:number)=>{\r\n        counter=pageNum;\r\n       lyric({\r\n          \r\n           id:id as string,\r\n           \r\n        }).then((response)=>{\r\n            let res=response.data;\r\n            // console.log(res);\r\n            // console.log(res.lrc);\r\n            let res1 = res.lrc;\r\n            let lyricList = result.lyricList\r\n            // console.log(res1);\r\n            let lyc1  = res1.lyric as string\r\n            \r\n            lyc1.split(/[\\n]/) // 截取中括号\r\n      .forEach((item: string) => {\r\n        let temp: Array<string> = item.split(/\\[(.+?)\\]/)\r\n        lyricList.push(\r\n          {\r\n            time: temp[1], // 时间\r\n            lyc: temp[2] //歌词内容\r\n          })\r\n      })\r\n    lyricList = lyricList.filter((v: { [x: string]: any; }) => v['lyc']) // 去除无歌词内容\r\n    setResult({\r\n      lyric: res['lrc']['lyric'],\r\n      lyricList\r\n    })\r\n            // setResult({\r\n               \r\n            //     lyric:res.lrc.lyric,\r\n            // })\r\n        })\r\n    }\r\n    const nextPage = () => {\r\n        console.log(counter);\r\n        counter++;\r\n        goPage(counter);\r\n    }\r\n    const previousPage=()=>{\r\n        console.log(counter);\r\n        counter--;\r\n        goPage(counter);\r\n    }\r\n    const handleInput=(e:React.ChangeEvent<HTMLInputElement>)=>{\r\n        setInputPageNum(e.target.value);\r\n    }\r\n    const submitInputPage=()=>{\r\n        goPage(Number(inputPageNum));\r\n        setInputPageNum('');\r\n    }\r\n    const goDetail=()=>{\r\n        window.open('#/detail','_self');\r\n    }\r\n    useEffect(()=>{\r\n        if(counter===0){\r\n           goPage(1);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <><div>\r\n            {/* {result.lyric} */}\r\n            {/* <h1>找到了{result.total}条结果</h1>\r\n    <Button onClick={previousPage} disabled={hasPrevious()}>上一页</Button>\r\n    <Button onClick={nextPage}>下一页</Button>\r\n    请输入您想跳转的页面:<input value={inputPageNum} onChange={handleInput}/>\r\n    <Button onClick={submitInputPage}>跳转到此页</Button> */}\r\n            <ul style={{margin:\"2% 10% 0 10%\"}}>\r\n                {result.lyricList.map((value: lyricmodel, index) => {\r\n                    return (\r\n                        <li key={index} onClick={goDetail}>\r\n                            {value.time}-----------歌词:{value.lyc}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            \r\n            \r\n        </div></>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}