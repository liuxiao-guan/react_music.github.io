{"ast":null,"code":"var _jsxFileName = \"D:\\\\vscode\\\\react_netease_music\\\\src\\\\components\\\\detail\\\\Lyric.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // import {search} from \"../utils/search\";\n\nimport { lyric } from \"../utils/lyric\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet counter = 0; //第二版搜索结果\n\nexport default function Lyric() {\n  _s();\n\n  const [inputPageNum, setInputPageNum] = useState('');\n  const [result, setResult] = useState({\n    lyric: \"你好\",\n    lyricList: [{\n      time: \"\",\n      lyc: \"\"\n    }]\n  });\n  let {\n    id\n  } = useParams();\n\n  const hasPrevious = () => {\n    return counter === 1;\n  };\n\n  const goPage = pageNum => {\n    counter = pageNum;\n    lyric({\n      id: id\n    }).then(response => {\n      let res = response.data; // console.log(res);\n      // console.log(res.lrc);\n\n      let res1 = res.lrc;\n      let lyricList = result.lyricList; // console.log(res1);\n\n      let lyc1 = res1.lyric;\n      lyc1.split(/[\\n]/) // 截取中括号\n      .forEach(item => {\n        let temp = item.split(/\\[(.+?)\\]/);\n        lyricList.push({\n          time: temp[1],\n          // 时间\n          lyc: temp[2] //歌词内容\n\n        });\n      });\n      lyricList = lyricList.filter(v => v['lyc']); // 去除无歌词内容\n\n      setResult({\n        lyric: res['lrc']['lyric'],\n        lyricList\n      }); // setResult({\n      //     lyric:res.lrc.lyric,\n      // })\n    });\n  };\n\n  const nextPage = () => {\n    console.log(counter);\n    counter++;\n    goPage(counter);\n  };\n\n  const previousPage = () => {\n    console.log(counter);\n    counter--;\n    goPage(counter);\n  };\n\n  const handleInput = e => {\n    setInputPageNum(e.target.value);\n  };\n\n  const submitInputPage = () => {\n    goPage(Number(inputPageNum));\n    setInputPageNum('');\n  };\n\n  const goDetail = () => {\n    window.open('#/detail', '_self');\n  };\n\n  useEffect(() => {\n    if (counter === 0) {\n      goPage(1);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          margin: \"2% 10% 0 10%\"\n        },\n        children: result.lyricList.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: goDetail,\n            children: [value.time, \"-----------\\u6B4C\\u8BCD:\", value.lyc]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(Lyric, \"rGSMGAXCLHtrQwfs3Z1V5yZdO/M=\", false, function () {\n  return [useParams];\n});\n\n_c = Lyric;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lyric\");","map":{"version":3,"sources":["D:/vscode/react_netease_music/src/components/detail/Lyric.tsx"],"names":["React","useEffect","useState","useParams","lyric","counter","Lyric","inputPageNum","setInputPageNum","result","setResult","lyricList","time","lyc","id","hasPrevious","goPage","pageNum","then","response","res","data","res1","lrc","lyc1","split","forEach","item","temp","push","filter","v","nextPage","console","log","previousPage","handleInput","e","target","value","submitInputPage","Number","goDetail","window","open","margin","map","index"],"mappings":"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","sourcesContent":["\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\n// import {search} from \"../utils/search\";\r\nimport { lyric } from \"../utils/lyric\";\r\nimport {Button} from \"antd\";\r\nimport TopJumper from \"./TopJumper\";\r\n\r\n//封装歌曲结果对象\r\n/*\r\n* 不得不吐槽一下Typescript要求真多，这些参数是通过报错信息找到的，\r\n* 如果想看，可以在下面渲染的时候，在map中把value的类型去掉，并在li的渲染中直接渲染value，react会在报错信息中提示\r\n* 还不太清楚各个参数具体的类型，所以暂时都使用any\r\n* */\r\ninterface SongProps {\r\n    id: any,\r\n    name: any,\r\n    artists: any,\r\n    album: any,\r\n    duration: any,\r\n    copyrightId: any,\r\n    status: any,\r\n    alias: any,\r\n    rtype: any,\r\n    ftype: any,\r\n    mvid: any,\r\n    fee: any,\r\n    rUrl: any,\r\n    mark: any,\r\n}\r\nexport interface lyricmodel{\r\n    time:string,\r\n    lyc:string,\r\n}\r\nlet counter=0;\r\n//第二版搜索结果\r\nexport default function Lyric() {\r\n    const [inputPageNum,setInputPageNum]=useState('');\r\n    const [result, setResult] = useState({\r\n        lyric:\"你好\",\r\n        lyricList:[{time:\"\",lyc:\"\"}],\r\n        \r\n    });\r\n    let {id} = useParams() ;\r\n    const hasPrevious=()=>{\r\n        return counter===1;\r\n    }\r\n    const goPage = (pageNum:number)=>{\r\n        counter=pageNum;\r\n       lyric({\r\n          \r\n           id:id as string,\r\n           \r\n        }).then((response)=>{\r\n            let res=response.data;\r\n            // console.log(res);\r\n            // console.log(res.lrc);\r\n            let res1 = res.lrc;\r\n            let lyricList = result.lyricList\r\n            // console.log(res1);\r\n            let lyc1  = res1.lyric as string\r\n            \r\n            lyc1.split(/[\\n]/) // 截取中括号\r\n      .forEach((item: string) => {\r\n        let temp: Array<string> = item.split(/\\[(.+?)\\]/)\r\n        lyricList.push(\r\n          {\r\n            time: temp[1], // 时间\r\n            lyc: temp[2] //歌词内容\r\n          })\r\n      })\r\n    lyricList = lyricList.filter((v: { [x: string]: any; }) => v['lyc']) // 去除无歌词内容\r\n    setResult({\r\n      lyric: res['lrc']['lyric'],\r\n      lyricList\r\n    })\r\n            // setResult({\r\n               \r\n            //     lyric:res.lrc.lyric,\r\n            // })\r\n        })\r\n    }\r\n    const nextPage = () => {\r\n        console.log(counter);\r\n        counter++;\r\n        goPage(counter);\r\n    }\r\n    const previousPage=()=>{\r\n        console.log(counter);\r\n        counter--;\r\n        goPage(counter);\r\n    }\r\n    const handleInput=(e:React.ChangeEvent<HTMLInputElement>)=>{\r\n        setInputPageNum(e.target.value);\r\n    }\r\n    const submitInputPage=()=>{\r\n        goPage(Number(inputPageNum));\r\n        setInputPageNum('');\r\n    }\r\n    const goDetail=()=>{\r\n        window.open('#/detail','_self');\r\n    }\r\n    useEffect(()=>{\r\n        if(counter===0){\r\n           goPage(1);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <><div>\r\n            {/* {result.lyric} */}\r\n            {/* <h1>找到了{result.total}条结果</h1>\r\n    <Button onClick={previousPage} disabled={hasPrevious()}>上一页</Button>\r\n    <Button onClick={nextPage}>下一页</Button>\r\n    请输入您想跳转的页面:<input value={inputPageNum} onChange={handleInput}/>\r\n    <Button onClick={submitInputPage}>跳转到此页</Button> */}\r\n            <ul style={{margin:\"2% 10% 0 10%\"}}>\r\n                {result.lyricList.map((value: lyricmodel, index) => {\r\n                    return (\r\n                        <li key={index} onClick={goDetail}>\r\n                            {value.time}-----------歌词:{value.lyc}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            \r\n            \r\n        </div></>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}