{"ast":null,"code":"var _jsxFileName = \"D:\\\\vscode\\\\react_netease_music\\\\src\\\\components\\\\detail\\\\Lyric.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // import {search} from \"../utils/search\";\n\nimport { lyric } from \"../utils/lyric\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet counter = 0;\nexport default function Lyric() {\n  _s();\n\n  const [inputPageNum, setInputPageNum] = useState('');\n  const [result, setResult] = useState({\n    lyric: \"你好\",\n    lyricList: [{\n      time: \"\",\n      lyc: \"\"\n    }]\n  });\n  let {\n    id\n  } = useParams();\n\n  const hasPrevious = () => {\n    return counter === 1;\n  };\n\n  const goPage = pageNum => {\n    if (counter === parseInt(id)) {\n      counter = 0;\n    } else {\n      counter = parseInt(id);\n    }\n\n    lyric({\n      id: id\n    }).then(response => {\n      let res = response.data; // console.log(res);\n      // console.log(res.lrc);\n\n      let res1 = res.lrc;\n      let lyricList = result.lyricList; // console.log(res1);\n\n      let lyc1 = res1.lyric;\n      lyc1.split(/[\\n]/) // 截取中括号\n      .forEach(item => {\n        let temp = item.split(/\\[(.+?)\\]/);\n        lyricList.push({\n          time: temp[1],\n          // 时间\n          lyc: temp[2] //歌词内容\n\n        });\n      });\n      lyricList = lyricList.filter(v => v['lyc']); // 去除无歌词内容\n\n      setResult({\n        lyric: res['lrc']['lyric'],\n        lyricList\n      });\n    });\n  };\n\n  const nextPage = () => {\n    console.log(counter);\n    counter++;\n    goPage(counter);\n  };\n\n  const previousPage = () => {\n    console.log(counter);\n    counter--;\n    goPage(counter);\n  };\n\n  const handleInput = e => {\n    setInputPageNum(e.target.value);\n  };\n\n  const submitInputPage = () => {\n    goPage(Number(inputPageNum));\n    setInputPageNum('');\n  };\n\n  const goDetail = () => {\n    window.open('#/detail', '_self');\n  };\n\n  useEffect(() => {\n    // if (counter !== parseInt(id as string) || counter === 0) {\n    goPage(1); // }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        margin: \"2% 10% 40px 10%\"\n      },\n      children: result.lyricList.map((value, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [value.time, \"-----------:\", value.lyc]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Lyric, \"ArYi1e4PMOkydhbETJaQrseOhAU=\", false, function () {\n  return [useParams];\n});\n\n_c = Lyric;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lyric\");","map":{"version":3,"sources":["D:/vscode/react_netease_music/src/components/detail/Lyric.tsx"],"names":["React","useEffect","useState","useParams","lyric","counter","Lyric","inputPageNum","setInputPageNum","result","setResult","lyricList","time","lyc","id","hasPrevious","goPage","pageNum","parseInt","then","response","res","data","res1","lrc","lyc1","split","forEach","item","temp","push","filter","v","nextPage","console","log","previousPage","handleInput","e","target","value","submitInputPage","Number","goDetail","window","open","margin","map","index"],"mappings":"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","sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// import {search} from \"../utils/search\";\r\nimport { lyric } from \"../utils/lyric\";\r\n\r\ninterface SongProps {\r\n    id: any,\r\n    name: any,\r\n    artists: any,\r\n    album: any,\r\n    duration: any,\r\n    copyrightId: any,\r\n    status: any,\r\n    alias: any,\r\n    rtype: any,\r\n    ftype: any,\r\n    mvid: any,\r\n    fee: any,\r\n    rUrl: any,\r\n    mark: any,\r\n}\r\nexport interface lyricmodel {\r\n    time: string,\r\n    lyc: string,\r\n}\r\nlet counter = 0;\r\nexport default function Lyric() {\r\n    const [inputPageNum, setInputPageNum] = useState('');\r\n    const [result, setResult] = useState({\r\n        lyric: \"你好\",\r\n        lyricList: [{ time: \"\", lyc: \"\" }],\r\n\r\n    });\r\n    let { id } = useParams();\r\n    const hasPrevious = () => {\r\n        return counter === 1;\r\n    }\r\n    const goPage = (pageNum: number) => {\r\n        if(counter === parseInt(id as string)){\r\n            counter = 0;\r\n        }else{\r\n            counter =parseInt(id as string);\r\n        }     \r\n        lyric({\r\n            id: id as string,\r\n        }).then((response) => {\r\n            let res = response.data;\r\n            // console.log(res);\r\n            // console.log(res.lrc);\r\n            let res1 = res.lrc;\r\n            let lyricList = result.lyricList\r\n            // console.log(res1);\r\n            let lyc1 = res1.lyric as string\r\n\r\n            lyc1.split(/[\\n]/) // 截取中括号\r\n                .forEach((item: string) => {\r\n                    let temp: Array<string> = item.split(/\\[(.+?)\\]/)\r\n                    lyricList.push(\r\n                        {\r\n                            time: temp[1], // 时间\r\n                            lyc: temp[2] //歌词内容\r\n                        })\r\n                })\r\n            lyricList = lyricList.filter((v: { [x: string]: any; }) => v['lyc']) // 去除无歌词内容\r\n            setResult({\r\n                lyric: res['lrc']['lyric'],\r\n                lyricList\r\n            })\r\n        })\r\n    }\r\n    const nextPage = () => {\r\n        console.log(counter);\r\n        counter++;\r\n        goPage(counter);\r\n    }\r\n    const previousPage = () => {\r\n        console.log(counter);\r\n        counter--;\r\n        goPage(counter);\r\n    }\r\n    const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputPageNum(e.target.value);\r\n    }\r\n    const submitInputPage = () => {\r\n        goPage(Number(inputPageNum));\r\n        setInputPageNum('');\r\n    }\r\n    const goDetail = () => {\r\n        window.open('#/detail', '_self');\r\n    }\r\n    useEffect(() => {\r\n        // if (counter !== parseInt(id as string) || counter === 0) {\r\n            goPage(1);\r\n        // }\r\n        \r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <ul style={{ margin: \"2% 10% 40px 10%\" }}>\r\n                {result.lyricList.map((value: lyricmodel, index) => {\r\n                    return (\r\n                        <li key={index} >\r\n                            {value.time}-----------:{value.lyc}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}